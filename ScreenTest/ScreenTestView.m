//
//  ScreenTestView.m
//  ScreenTest
//
//  Created by Anthony Fruzza on 12/4/16.
//  Copyright Â© 2016 Anthony Fruzza. All rights reserved.
//

#import "ScreenTestView.h"

#define SPRITE_WIDTH       16
#define SPRITE_HEIGHT      16
#define H_PIXEL_RATIO_TO_V 1.8
#define H_PIXEL_SIZE_MIN   20
#define H_PIXEL_SIZE_MAX   200



@implementation ScreenTestView
float offset_x, offset_y;
- (instancetype)initWithFrame:(NSRect)frame isPreview:(BOOL)isPreview
{
    self = [super initWithFrame:frame isPreview:isPreview];
    if (self) {
        [self setAnimationTimeInterval:1/2.0];
    }
    return self;
}

- (void)startAnimation
{
    [super startAnimation];
}

- (void)stopAnimation
{
    [super stopAnimation];
}

- (void)drawRect:(NSRect)rect
{
    [super drawRect:rect];
}

- (void)animateOneFrame
{
    NSBezierPath *path;
    NSRect rect;
    NSSize size;
    NSColor *color;
    unsigned int indexColor, imagePicker, h_pixel_size, v_pixel_size;
    
    CGFloat alphaVal  = 1;
    // Similar to Commodore 64 colormap with 16 designated as transparent
    NSArray *colorMap = @[
                          // 0 Black
                          [NSColor colorWithCalibratedRed: 0.0
                                                    green: 0.0
                                                     blue: 0.0
                                                    alpha: alphaVal
                           ],
                          // 1 White
                          [NSColor colorWithCalibratedRed: 255/255
                                                    green: 255/255
                                                     blue: 255/255
                                                    alpha: alphaVal
                           ],
                          // 2 Red
                          [NSColor colorWithCalibratedRed: 130.0/255.0
                                                    green: 55.0/255.0
                                                     blue: 50.0/255.0
                                                    alpha:alphaVal
                           ],
                          // 3 Cyan
                          [NSColor colorWithCalibratedRed: 106.0/255.0
                                                    green: 175.0/255.0
                                                     blue: 180.0/255.0
                                                    alpha: alphaVal
                           ],
                          // 4 L Brown
                          [NSColor colorWithCalibratedRed: 138.0/255.0
                                                    green: 84.0/255.0
                                                     blue: 36.0/255.0
                                                    alpha: alphaVal
                           ],
                          // 5 Brown
                          [NSColor colorWithCalibratedRed: 87/255.0
                                                    green: 66/255.0
                                                     blue: 9/255.0
                                                    alpha: alphaVal
                           ],
                          // 6 Pink
                          [NSColor colorWithCalibratedRed: 224/255.0
                                                    green: 198/255.0
                                                     blue: 190/255.0
                                                    alpha: alphaVal
                           ],
                          // 7 Dark Grey
                          [NSColor colorWithCalibratedRed: 80/255.0
                                                    green: 80/255.0
                                                     blue: 80/255.0
                                                    alpha: alphaVal
                           ],
                          // 8 Purple
                          [NSColor colorWithCalibratedRed: 138/255.0
                                                    green: 67/255.0
                                                     blue: 149/255.0
                                                    alpha: alphaVal
                           ],
                          // 9 Green
                          [NSColor colorWithCalibratedRed: 88/255.0
                                                    green: 160/255.0
                                                     blue: 78/255.0
                                                    alpha: alphaVal
                           ],
                          // 10 Blue
                          [NSColor colorWithCalibratedRed: 64/255.0
                                                    green: 53/255.0
                                                     blue: 139/255.0
                                                    alpha: alphaVal
                           ],
                          // 11 Yellow
                          [NSColor colorWithCalibratedRed: 192/255.0
                                                    green: 205/255.0
                                                     blue: 120/255.0
                                                    alpha: alphaVal
                           ],
                          // 12 Grey
                          [NSColor colorWithCalibratedRed: 121/255.0
                                                    green: 121/255.0
                                                     blue: 121/255.0
                                                    alpha: alphaVal
                           ],
                          // 13 Light Green
                          [NSColor colorWithCalibratedRed: 151/255.0
                                                    green: 224/255.0
                                                     blue: 141/255.0
                                                    alpha: alphaVal
                           ],
                          // 14 Light Blue
                          [NSColor colorWithCalibratedRed: 121/255.0
                                                    green: 108/255.0
                                                     blue: 195/255.0
                                                    alpha: alphaVal
                           ],
                          // 15 Light Grey
                          [NSColor colorWithCalibratedRed: 160/255.0
                                                    green: 160/255.0
                                                     blue: 160/255.0
                                                    alpha: alphaVal
                           ],
                          // 16 cut out
                          [NSColor colorWithCalibratedRed: 160/255.0
                                                    green: 160/255.0
                                                     blue: 160/255.0
                                                    alpha: 0
                           ]
                          
                          ];
    
    
    // Sprite bitmaps
    const unsigned char icon_head[SPRITE_WIDTH*SPRITE_HEIGHT] =
    {
        16,16,16,16,16,16,4,4,4,4,16,16,16,16,16,16,
        16,16,16,16,4,4,4,4,4,4,4,4,16,16,16,16,
        16,16,16,0,4,4,4,0,0,4,4,4,0,16,16,16,
        16,16,0,4,6,6,4,4,4,4,6,6,4,0,16,16,
        16,0,4,4,6,6,6,6,6,6,6,6,4,4,0,16,
        16,0,4,4,1,1,6,6,6,6,1,1,4,4,0,16,
        0,6,6,6,1,0,6,6,6,6,0,1,6,6,6,0,
        0,6,6,6,1,1,6,6,6,6,1,1,6,6,6,0,
        16,0,6,6,6,6,6,6,6,6,6,6,6,6,0,16,
        16,0,6,6,0,0,6,6,6,6,0,0,6,6,0,16,
        16,0,6,6,6,6,6,6,6,6,6,6,6,6,0,16,
        16,16,4,4,6,6,6,6,6,6,6,6,4,4,16,16,
        16,16,16,0,6,6,4,4,4,4,6,6,0,16,16,16,
        16,16,16,16,4,4,4,4,4,4,4,4,16,16,16,16,
        16,16,16,16,16,16,4,4,4,4,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };

    const unsigned char icon_head_blink[SPRITE_WIDTH*SPRITE_HEIGHT] =
    {
        16,16,16,16,16,16,4,4,4,4,16,16,16,16,16,16,
        16,16,16,16,4,4,4,4,4,4,4,4,16,16,16,16,
        16,16,16,0,4,4,4,0,0,4,4,4,0,16,16,16,
        16,16,0,4,6,6,4,4,4,4,6,6,4,0,16,16,
        16,0,4,4,6,6,6,6,6,6,6,6,4,4,0,16,
        16,0,4,4,6,6,6,6,6,6,6,6,4,4,0,16,
        0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,
        0,6,6,6,0,0,6,6,6,6,0,0,6,6,6,0,
        16,0,6,6,6,6,6,6,6,6,6,6,6,6,0,16,
        16,0,6,6,0,0,6,6,6,6,0,0,6,6,0,16,
        16,0,6,6,6,6,6,6,6,6,6,6,6,6,0,16,
        16,16,4,4,6,6,6,6,6,6,6,6,4,4,16,16,
        16,16,16,0,6,6,4,4,4,4,6,6,0,16,16,16,
        16,16,16,16,4,4,4,4,4,4,4,4,16,16,16,16,
        16,16,16,16,16,16,4,4,4,4,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_alarm_clock[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,12,16,2,2,2,2,2,2,16,12,16,16,16,
        16,16,16,16,2,2,1,0,1,15,2,2,16,16,16,16,
        16,16,16,2,2,1,15,1,15,1,15,2,2,16,16,16,
        16,16,6,2,1,1,1,1,1,1,1,15,2,2,16,16,
        16,6,6,1,1,1,1,1,1,1,15,1,15,2,2,16,
        16,6,1,1,1,1,1,1,1,1,1,1,1,15,2,16,
        16,6,1,1,1,1,1,1,7,7,7,7,15,1,2,16,
        16,6,0,1,1,1,1,7,7,1,1,1,1,0,2,16,
        16,6,1,1,1,1,1,7,1,1,1,1,1,1,2,16,
        16,6,6,1,1,1,7,7,1,1,1,1,1,6,2,16,
        16,16,6,6,1,1,7,1,1,1,1,1,6,6,16,16,
        2,6,16,6,6,1,1,1,1,1,1,6,6,16,6,2,
        6,6,6,16,6,6,1,0,1,1,6,6,16,6,6,6,
        16,6,6,6,16,6,6,6,6,6,6,16,6,6,6,16,
        12,16,6,2,16,16,16,12,12,16,16,16,2,6,16,12,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_cell_phone[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,0,0,0,0,0,0,0,0,0,16,16,16,
        16,16,16,0,12,7,7,7,7,7,7,7,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,0,0,0,0,0,0,7,0,16,16,
        16,16,16,0,15,0,3,14,14,14,14,0,7,0,16,16,
        16,16,16,0,15,0,3,3,14,14,14,0,7,0,16,16,
        16,16,16,0,15,0,3,3,3,14,14,0,7,0,16,16,
        16,16,16,0,15,0,0,0,0,0,0,0,7,0,16,16,
        16,16,16,0,15,15,15,15,15,12,12,12,7,0,16,16,
        16,16,16,16,0,0,0,0,0,0,0,0,0,16,16,16
    };
    
    const unsigned char icon_hour_glass[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,5,5,5,2,5,5,5,5,5,5,5,16,16,16,
        16,16,5,6,2,5,5,5,5,5,5,5,5,16,16,16,
        16,16,16,0,11,11,11,11,11,11,12,0,16,16,16,16,
        16,16,16,0,1,11,11,11,11,11,12,0,16,16,16,16,
        16,16,16,0,1,15,11,11,11,12,12,0,16,16,16,16,
        16,16,16,16,0,1,15,11,12,12,0,16,16,16,16,16,
        16,16,16,16,16,0,15,15,12,0,16,16,16,16,16,16,
        16,16,16,16,16,16,0,11,0,16,16,16,16,16,16,16,
        16,16,16,16,16,16,0,12,0,16,16,16,16,16,16,16,
        16,16,16,16,16,0,11,11,11,0,16,16,16,16,16,16,
        16,16,16,16,0,1,11,11,12,11,0,16,16,16,16,16,
        16,16,16,0,1,15,15,15,12,12,12,0,16,16,16,16,
        16,16,16,0,1,15,15,15,15,12,12,0,16,16,16,16,
        16,16,16,0,1,15,15,15,15,15,12,0,16,16,16,16,
        16,16,5,5,5,2,5,5,5,5,5,5,5,16,16,16,
        16,16,5,6,2,5,5,5,5,5,5,5,5,16,16,16
    };
    
    const unsigned char icon_pager_duty_green[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,0,0,0,0,0,0,0,0,0,16,16,16,
        16,16,16,0,12,7,7,7,7,7,7,7,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,12,12,0,12,12,0,7,0,16,16,
        16,16,16,0,15,12,12,12,12,12,12,12,7,0,16,16,
        16,16,16,0,15,0,0,0,0,0,0,0,7,0,16,16,
        16,16,16,0,15,0,13,9,9,9,9,0,7,0,16,16,
        16,16,16,0,15,0,13,13,9,9,9,0,7,0,16,16,
        16,16,16,0,15,0,13,13,13,9,9,0,7,0,16,16,
        16,16,16,0,15,0,0,0,0,0,0,0,7,0,16,16,
        16,16,16,0,15,15,15,15,15,12,12,12,7,0,16,16,
        16,16,16,16,0,0,0,0,0,0,0,0,0,16,16,16
    };
    
    const unsigned char icon_sql[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,3,3,14,14,14,16,16,16,16,16,
        16,16,16,16,3,13,3,14,14,14,14,3,16,16,16,16,
        16,16,16,14,3,10,10,10,10,10,10,3,14,16,16,16,
        16,16,16,14,10,13,3,3,14,14,14,10,14,16,16,16,
        16,16,16,10,3,13,3,14,14,14,14,3,10,16,16,16,
        16,16,16,14,3,10,10,10,10,10,10,3,14,16,16,16,
        16,16,16,14,10,13,3,3,14,14,14,10,14,16,16,16,
        16,16,16,10,3,13,3,14,14,14,14,3,10,16,16,16,
        16,16,16,14,3,10,10,10,10,10,10,3,14,16,16,16,
        16,16,16,14,10,13,3,3,14,14,14,10,14,16,16,16,
        16,16,16,10,3,13,3,14,14,14,14,3,10,16,16,16,
        16,16,16,14,3,14,10,10,10,10,14,14,14,16,16,16,
        16,16,16,16,14,3,3,14,3,14,3,14,16,16,16,16,
        16,16,16,16,16,14,3,3,14,3,14,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_trash[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,0,0,0,7,0,0,0,0,0,0,16,16,16,
        16,16,16,0,15,1,12,15,1,0,15,1,0,16,16,16,
        16,16,16,0,15,15,12,15,15,0,15,15,0,16,16,16,
        16,16,16,0,15,15,12,15,15,0,15,15,0,16,16,16,
        16,16,16,0,15,15,7,15,15,0,15,15,0,16,16,16,
        16,16,16,0,15,15,7,15,15,0,15,15,0,16,16,16,
        16,16,16,0,15,15,7,15,15,0,15,15,0,16,16,16,
        16,16,16,0,15,15,7,15,15,0,15,15,0,16,16,16,
        16,16,16,0,12,15,7,12,15,0,12,15,0,16,16,16,
        16,16,16,0,7,12,7,7,12,0,7,12,0,16,16,16,
        16,16,16,0,0,0,7,7,0,0,0,0,0,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,0,0,0,0,7,7,0,0,0,0,0,0,16,16,
        16,16,16,16,16,16,7,7,0,0,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_bell[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,11,11,5,16,16,16,16,16,16,16,16,
        16,16,16,16,16,11,11,11,7,5,11,11,16,16,16,16,
        16,16,16,16,11,11,11,1,11,7,1,11,16,16,16,16,
        16,16,16,16,15,15,11,11,1,11,7,5,5,16,16,16,
        16,16,16,11,11,15,15,11,11,1,11,7,5,5,16,16,
        16,16,16,11,11,11,15,1,11,11,11,11,7,5,16,16,
        16,16,16,11,11,1,11,15,15,11,11,11,11,7,5,16,
        16,16,16,11,11,11,1,11,15,15,11,11,11,11,7,16,
        16,16,11,11,1,11,11,11,11,15,15,11,11,11,11,5,
        16,16,11,11,11,1,11,11,11,11,15,15,11,11,11,11,
        16,11,11,1,11,11,11,11,11,11,11,15,15,11,16,16,
        16,11,11,11,1,11,11,11,11,11,11,11,16,16,16,16,
        16,11,1,11,11,11,11,11,11,11,16,16,16,16,16,16,
        16,12,11,11,11,11,11,11,11,16,16,16,16,16,16,16,
        11,11,12,11,11,11,11,16,16,16,16,16,16,16,16,16,
        11,11,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_construction[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,
        2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,
        16,2,11,1,1,1,1,7,0,1,1,1,1,11,2,16,
        16,2,11,11,1,1,1,1,1,1,1,1,11,11,2,16,
        16,16,2,11,11,1,1,7,0,1,1,11,11,2,16,16,
        16,16,16,2,11,1,1,7,0,1,1,11,2,16,16,16,
        16,16,16,2,11,11,1,12,7,1,11,11,2,16,16,16,
        16,16,16,16,2,11,1,15,12,1,11,2,16,16,16,16,
        16,16,16,16,5,13,11,1,1,11,11,2,16,16,16,16,
        16,16,16,16,16,5,13,11,11,11,2,16,16,16,16,16,
        16,16,16,16,16,16,5,13,11,2,16,16,16,16,16,16,
        16,16,16,16,16,16,5,13,13,2,16,16,16,16,16,16,
        16,16,16,16,16,16,16,5,2,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,5,5,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_hammer[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,0,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,0,2,0,16,16,16,
        16,16,16,16,16,16,16,16,16,0,2,2,6,0,16,16,
        16,16,16,16,0,16,16,16,0,2,2,6,0,16,16,16,
        16,16,16,0,12,0,16,0,2,2,6,0,16,16,16,16,
        16,16,0,7,7,7,0,2,2,6,0,16,16,16,16,16,
        16,0,7,7,15,7,7,7,6,0,16,16,16,16,16,16,
        16,0,7,15,15,15,15,7,7,0,16,16,16,16,16,16,
        16,0,15,15,15,15,15,15,7,7,0,16,16,16,16,16,
        16,16,0,15,12,15,12,15,12,15,0,16,16,16,16,16,
        16,16,16,0,15,12,15,12,15,0,16,16,16,16,16,16,
        16,16,16,16,0,12,12,12,0,16,16,16,16,16,16,16,
        16,16,16,16,16,0,0,0,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_key[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        5,5,5,16,16,16,16,16,16,16,16,16,16,16,16,16,
        5,11,5,16,16,16,16,16,16,16,16,16,16,16,16,16,
        5,11,5,5,5,5,16,16,16,16,16,16,16,16,16,16,
        16,5,11,5,11,5,16,16,16,16,16,16,16,16,16,16,
        16,16,5,11,5,11,5,5,16,16,16,16,16,16,16,16,
        16,16,16,5,11,5,11,11,5,5,16,16,16,16,16,16,
        16,16,16,16,5,11,5,11,11,5,16,16,16,16,16,16,
        16,16,16,16,16,5,11,5,11,11,5,5,5,16,16,16,
        16,16,16,16,16,16,5,11,5,15,11,11,11,5,5,16,
        16,16,16,16,16,16,16,5,15,11,11,11,11,11,5,16,
        16,16,16,16,16,16,16,5,11,11,11,11,5,5,11,5,
        16,16,16,16,16,16,16,5,11,11,11,5,16,5,11,5,
        16,16,16,16,16,16,16,5,11,11,5,16,16,5,11,5,
        16,16,16,16,16,16,16,16,5,11,5,5,5,11,5,16,
        16,16,16,16,16,16,16,16,5,5,11,11,11,5,5,16,
        16,16,16,16,16,16,16,16,16,16,5,5,5,16,16,16
    };
    
    const unsigned char icon_screen[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,7,7,7,7,7,7,7,7,16,16,16,16,
        16,16,16,16,16,16,16,0,0,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,0,0,16,16,16,16,16,16,16,
        16,7,7,7,7,7,7,7,7,7,7,7,7,7,7,16,
        16,7,9,9,9,9,9,9,9,9,9,9,9,9,7,16,
        16,7,9,9,9,9,9,9,9,9,9,9,9,9,7,16,
        16,7,9,13,13,13,13,13,13,13,13,9,9,9,7,16,
        16,7,9,9,9,9,9,9,9,9,9,9,9,9,7,16,
        16,12,9,13,13,13,13,13,13,13,9,9,9,9,7,16,
        16,12,9,9,9,9,9,9,9,9,9,9,9,9,7,16,
        16,15,9,13,13,13,13,13,13,13,13,13,9,9,7,16,
        16,15,9,9,9,9,9,9,9,9,9,9,9,9,7,16,
        16,15,15,15,15,12,12,12,12,12,12,12,12,12,12,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char icon_tag[SPRITE_WIDTH*SPRITE_HEIGHT] = {
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,8,8,16,16,16,16,16,16,16,16,
        16,16,16,16,16,14,8,8,8,16,16,16,16,16,16,16,
        16,16,16,16,14,8,8,14,8,8,16,16,16,16,16,16,
        16,16,16,14,8,14,8,8,8,8,8,16,16,16,16,16,
        16,16,14,14,14,8,14,8,8,8,8,8,16,16,16,16,
        16,14,14,14,8,14,8,8,8,8,8,8,8,16,16,16,
        16,16,14,14,14,8,8,14,8,8,8,8,8,8,16,16,
        16,16,16,14,8,14,8,8,8,8,8,8,8,8,16,16,
        16,16,16,16,14,8,14,8,8,8,8,8,8,8,16,16,
        16,16,16,16,16,8,8,8,8,8,8,8,8,8,16,16,
        16,16,16,16,16,16,8,14,8,8,8,16,7,8,16,16,
        16,16,16,16,16,16,16,8,8,8,8,7,7,8,16,16,
        16,16,16,16,16,16,16,16,8,8,8,8,8,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,
        16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
    };
    
    const unsigned char *image_collection[] = {
        icon_alarm_clock,
        icon_head,
        icon_head_blink,
        icon_cell_phone,
        icon_hour_glass,
        icon_pager_duty_green,
        icon_sql,
        icon_trash,
        icon_bell,
        icon_construction,
        icon_hammer,
        icon_key,
        icon_screen,
        icon_tag
    };
    
    // 0, 0 is at the bottom left corner
    size = [self bounds].size; // Screen bound
    
    // Draw over the last frame filling the screen
    rect.origin.y = 0;
    rect.origin.x = 0;
    rect.size     = NSMakeSize(size.width, size.height);
    color         = [NSColor colorWithCalibratedRed: 128/255.0
                                              green: 128/255.0
                                               blue: 128/255.0
                                              alpha: 0.3 ];
    path  = [NSBezierPath bezierPathWithRect:rect];
    [color set];
    [path fill];
    
    // Choose the size of the image
    v_pixel_size = SSRandomIntBetween(H_PIXEL_SIZE_MIN, H_PIXEL_SIZE_MAX);
    h_pixel_size = v_pixel_size * H_PIXEL_RATIO_TO_V;
    
    // Set pixel size/aspect ratio
    rect.size = NSMakeSize(size.width/h_pixel_size, size.height/v_pixel_size);

    // random location
    offset_x = (size.width/h_pixel_size)  * SSRandomIntBetween( 0, h_pixel_size - SPRITE_WIDTH );
    offset_y = (size.height/v_pixel_size) * SSRandomIntBetween( 0, v_pixel_size - SPRITE_HEIGHT );
    
    // Image to draw
    imagePicker = SSRandomIntBetween(0, 13);
    
    // Draw from the chosen image with transparency being COLOR_TRANSPARENT
    for(int y = SPRITE_HEIGHT-1; y > -1; y--){
        rect.origin.y = ((size.height/v_pixel_size) * y) + offset_y;
        for(int x = 0; x < SPRITE_WIDTH; x++){
            rect.origin.x = ((size.width/h_pixel_size) * x) + offset_x;
            path  = [NSBezierPath bezierPathWithRect:rect];
            indexColor = image_collection[imagePicker][(y * SPRITE_WIDTH) + x];
            color = colorMap[indexColor];
            [color set];
            [path fill];
        }
    }
    
    return;
}

- (BOOL)hasConfigureSheet
{
    return NO;
}

- (NSWindow*)configureSheet
{
    return nil;
}

@end
